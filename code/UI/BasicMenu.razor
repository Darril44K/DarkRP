@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
    <!-- This needs to be dynamic. Hard coded for now -->
    <div class="section">
        <div class="section-title">Dark Web</div>
        <div class="section-contents">
            <div class="button" onclick=@BuyBronzePrinter>
                <div class="icon"></div>
                <div class="label-container">
                    <div class="label">Bronze Printer</div>
                    <span class="description">@CurrentPrinter / @MaxPrinter</span>
                    <div class="price">$200</div>
                </div>
            </div>
            <div class="button" onclick=@BuySilverPrinter>
                <div class="icon"></div>
                <div class="label-container">
                    <div class="label">Silver Printer</div>
                    <span class="description">@CurrentPrinter / @MaxPrinter</span>
                    <div class="price">$200</div>
                </div>
            </div>  
            <div class="button" onclick=@BuyGoldPrinter>
                <div class="icon"></div>
                <div class="label-container">
                    <div class="label">Gold Printer</div>
                    <span class="description">@CurrentPrinter / @MaxPrinter</span>
                    <div class="price">$200</div>
                </div>
            </div>
            <div class="button" onclick=@BuyDiamondPrinter>
                <div class="icon"></div>
                <div class="label-container">
                    <div class="label">Diamond Printer</div>
                    <span class="description">@CurrentPrinter / @MaxPrinter</span>
                    <div class="price">$200</div>
                </div>
            </div>
        </div>
    </div>

    <!-- This needs to be dynamic. Hard coded for now -->
    <div class="section">
        <div class="section-title">Jobs</div>
        <div class="section-contents">
            @foreach (var job in new int[] {1, 2, 3, 4, 5, 6, 7, 8})
            {
                <div class="button">
                    <div class="icon"></div>
                    <div class="label-container">
                        <div class="label">Job @job</div>
                        <div class="description">Job @job description</div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="section">
        <div class="section-title">Information</div>
        <div class="section-contents">
            <div class="info" style="color: limegreen;">
                <h1>Completed</h1>
                <p>@InfoDone</p>
            </div>
            <div class="info" style="color: red;">
                <h1>TODO</h1>
                <p>@InfoTodo</p>
            </div>
            <div class="info" style="color: yellow;">
                <h1>Notes</h1>
                <p>@InfoNotes</p>
            </div>
            <div class="info" style="color: white;">
                <h1>Credits</h1>
                <p>@InfoCredits</p>
            </div>
        </div>
    </div>
</root>

@code
{

    [Property] GameObject PrinterPrefab { get; set; } // Printer Prefab Ref

    [Property, TextArea] public string InfoDone { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoTodo { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoNotes { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoCredits { get; set; } = "Hello World!";

    int MaxPrinter = 2;
    int CurrentPrinter = 0;


    void BuyBronzePrinter() {

        if (CurrentPrinter < MaxPrinter)

        {
            Vector3 Offset = (GameObject.Parent.Transform.Local.Forward);
            Vector3 PlayerPos = (GameObject.Parent.Transform.World.Position) + (Offset * 50);
            GameObject Printer = PrinterPrefab.Clone(PlayerPos); // It Spawn Locally
            Printer.Components.Get<ModelRenderer>().Tint = Printer.Components.Get<PrinterLogic>().Bronze;
            Printer.NetworkSpawn();  // It spawn on all clients
            CurrentPrinter++;
        }
                            }


    void BuySilverPrinter() {

        if (CurrentPrinter < MaxPrinter)

        {
            Vector3 Offset = (GameObject.Parent.Transform.Local.Forward);
            Vector3 PlayerPos = (GameObject.Parent.Transform.World.Position) + (Offset * 50);
            GameObject Printer = PrinterPrefab.Clone(PlayerPos); // It Spawn Locally
            Printer.Components.Get<ModelRenderer>().Tint = Printer.Components.Get<PrinterLogic>().Silver;
            Printer.NetworkSpawn();  // It spawn on all clients
            CurrentPrinter++;
        }

                            } 

    void BuyGoldPrinter() {

            if (CurrentPrinter < MaxPrinter)

            {
                Vector3 Offset = (GameObject.Parent.Transform.Local.Forward);
                Vector3 PlayerPos = (GameObject.Parent.Transform.World.Position) + (Offset * 50);
                GameObject Printer = PrinterPrefab.Clone(PlayerPos); // It Spawn Locally
                Printer.Components.Get<ModelRenderer>().Tint = Printer.Components.Get<PrinterLogic>().Gold;
                Printer.NetworkSpawn();  // It spawn on all clients
                CurrentPrinter++;
            }
                         }

     void BuyDiamondPrinter() {

        if (CurrentPrinter < MaxPrinter)

        {
            Vector3 Offset = (GameObject.Parent.Transform.Local.Forward);
            Vector3 PlayerPos = (GameObject.Parent.Transform.World.Position) + (Offset * 50);
            GameObject Printer = PrinterPrefab.Clone(PlayerPos); // It Spawn Locally
            Printer.Components.Get<ModelRenderer>().Tint = Printer.Components.Get<PrinterLogic>().Diamond;
            Printer.NetworkSpawn();  // It spawn on all clients
            CurrentPrinter++;
        }
                             }

    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(InfoDone, InfoTodo, InfoNotes);
}
