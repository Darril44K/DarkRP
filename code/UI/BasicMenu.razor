@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>

<div class="darkweb1">

    <div class="button" onclick=@BuyBronzePrinter> BRONZE PRINTER </div>
    <div class="button" onclick=@BuySilverPrinter> SILVER PRINTER </div>
    <div class="button" onclick=@BuyGoldPrinter> GOLD PRINTER </div>
    <div class="button" onclick=@BuyDiamondPrinter> DIAMOND PRINTER </div>

</div>

    <div class="Job1">

    <div class="button" onclick=""> JOB 1 </div>
    <div class="button" onclick=""> JOB 2 </div>
    <div class="button" onclick=""> JOB 3 </div>
    <div class="button" onclick=""> JOB 4 </div>
    <div class="button" onclick=""> JOB 5 </div>
    <div class="button" onclick=""> JOB 6 </div>

</div>

    <div class= "info1"> <div class="info2">

        <h1  style =  " margin-top: 2vh;   color: #00ff00; font-size:50px;">   <strong>DONE</strong></h1>
        <h1  style =  " margin-top: 5vh;   color: #00ff00; font-size:22px;">   <strong>@MyStringValue</strong></h1>
        <h1  style =  " margin-top: 5vh;   color: #ff3300; font-size:50px;">   <strong>TODO</strong></h1>
        <h1  style =  " margin-top: 3vh;   color: #ff3300; font-size:22px;">   <strong>@MyStringValue2</strong></h1>
        <h1  style =  " margin-top: 5vh;   color: #ffff00; font-size:50px;">   <strong>NOTE</strong></h1>
        <h1  style =  " margin-top: 3vh;   color: #ffff00; font-size:22px;">   <strong>@MyStringValue3</strong></h1>

    </div>

</root>

@code
{

    [Property] GameObject PrinterPrefab { get; set; } // Printer Prefab Ref

    [Property, TextArea] public string MyStringValue { get; set; } = "Hello World!";
    [Property, TextArea] public string MyStringValue2 { get; set; } = "Hello World!";
    [Property, TextArea] public string MyStringValue3 { get; set; } = "Hello World!";

    int MaxPrinter = 2;
    int CurrentPrinter = 0;


    void BuyBronzePrinter() {

        if (CurrentPrinter <= MaxPrinter)

        {
            Vector3 Offset = (GameObject.Parent.Transform.Local.Forward);
            Vector3 PlayerPos = (GameObject.Parent.Transform.World.Position) + (Offset * 50);
            GameObject Printer = PrinterPrefab.Clone(PlayerPos); // It Spawn Locally
            Printer.Components.Get<ModelRenderer>().Tint = Printer.Components.Get<PrinterLogic>().Bronze;
            Printer.NetworkSpawn();  // It spawn on all clients
            CurrentPrinter++;
        }
                            }


    void BuySilverPrinter() {

        if (CurrentPrinter <= MaxPrinter)

        {
            Vector3 Offset = (GameObject.Parent.Transform.Local.Forward);
            Vector3 PlayerPos = (GameObject.Parent.Transform.World.Position) + (Offset * 50);
            GameObject Printer = PrinterPrefab.Clone(PlayerPos); // It Spawn Locally
            Printer.Components.Get<ModelRenderer>().Tint = Printer.Components.Get<PrinterLogic>().Silver;
            Printer.NetworkSpawn();  // It spawn on all clients
            CurrentPrinter++;
        }

                            } 

    void BuyGoldPrinter() {

            if (CurrentPrinter <= MaxPrinter)

            {
                Vector3 Offset = (GameObject.Parent.Transform.Local.Forward);
                Vector3 PlayerPos = (GameObject.Parent.Transform.World.Position) + (Offset * 50);
                GameObject Printer = PrinterPrefab.Clone(PlayerPos); // It Spawn Locally
                Printer.Components.Get<ModelRenderer>().Tint = Printer.Components.Get<PrinterLogic>().Gold;
                Printer.NetworkSpawn();  // It spawn on all clients
                CurrentPrinter++;
            }
                         }

     void BuyDiamondPrinter() {

        if (CurrentPrinter <= MaxPrinter)

        {
            Vector3 Offset = (GameObject.Parent.Transform.Local.Forward);
            Vector3 PlayerPos = (GameObject.Parent.Transform.World.Position) + (Offset * 50);
            GameObject Printer = PrinterPrefab.Clone(PlayerPos); // It Spawn Locally
            Printer.Components.Get<ModelRenderer>().Tint = Printer.Components.Get<PrinterLogic>().Diamond;
            Printer.NetworkSpawn();  // It spawn on all clients
            CurrentPrinter++;
        }
                             }

    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(MyStringValue, MyStringValue2, MyStringValue3);
}
