@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@implements Component.INetworkListener

<root>

	<div class="output">
		@foreach (var entry in Entries)
        {
            @if (entry.timeSinceAdded < 10f || (InputBox != null && InputBox.HasFocus))
            {
                <div class="chat_entry">
                    @if (entry.steamid > 0)
                    {
                        <div class="avatar" style="background-image: url( avatar:@entry.steamid )"></div>
                    }
                    <div class="author">@entry.author</div>
                    <div class="message">@entry.message</div>
                </div>
            }
        }
	</div>

	<div class="input">
		<TextEntry @ref="InputBox" onsubmit="@ChatFinished"></TextEntry>
	</div>
	
</root>

@code
{
    TextEntry InputBox;
    int ChatOffset { get; set; } = 0;

    public record Entry( ulong steamid, string author, string message, RealTimeSince timeSinceAdded );
    List<Entry> Entries = new();

    protected override void OnUpdate()
    {
        if (InputBox is null)
            return;

        Panel.AcceptsFocus = false;

        if ( Input.Pressed( "chat" ) )
        {
            InputBox.Focus();
        }

        // Set entries to not be new after 30 seconds. This is so we can fade them out.
        foreach (var entry in Entries.Where(e => e.timeSinceAdded > 10.0f))
        {
            StateHasChanged();
        }

        SetClass( "open", InputBox.HasFocus );
    }

    void ChatFinished()
    {
        var text = InputBox.Text;
        InputBox.Text = "";

        if (string.IsNullOrWhiteSpace(text))
            return;

        AddText( text );
    }

    [Broadcast]
    public void AddText( string message )
    {
        message = message.Truncate( 300 );

        if (string.IsNullOrWhiteSpace(message))
            return;

        var author = Rpc.Caller.DisplayName;
        var steamid = Rpc.Caller.SteamId;

		Log.Info($"{author}: {message}");

        if (Entries.Count > 9)
        {
            Entries.RemoveAt(0);
        }
        Entries.Add(new Entry(steamid, author, message, 0.0f));
		StateHasChanged();
	}

    [Broadcast] // todo: only from host/owner
    public void AddSystemText(string message)
    {
        message = message.Truncate(300);

        if (string.IsNullOrWhiteSpace(message))
            return;

        Entries.Add(new Entry(0, "ℹ️", message, 0.0f));
        StateHasChanged();
    }

	void Component.INetworkListener.OnConnected( Connection channel )
	{
		if ( IsProxy ) return;

		AddSystemText( $"{channel.DisplayName} has joined the game" );
	}

	void Component.INetworkListener.OnDisconnected( Connection channel )
	{
		if ( IsProxy ) return;

		AddSystemText( $"{channel.DisplayName} has left the game" );
	}
}
